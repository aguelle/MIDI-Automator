<?xml version="1.0"?>
<project name="MIDI Automator" default="dmg" basedir=".">
	<property environment="env" />

	<!-- MacOS -->
	<property name="macos.bundle.dir" value="${target.dir}/${name}.app/Contents" />
	<property name="working.dir.macos.resources" value="$APP_ROOT/Contents/Resources" />
	<property name="java.runtime" value="jre/Contents/Home/" />
	<property name="mountdir" value="/tmp" />

	<!-- Generates a MacOS Bundle from the jar -->
	<target name="macbundle">
        <!-- change to ant/appBundler-1.0.jar for using the originial appbundler instead of branch from https://bitbucket.org/infinitekind/appbundler -->
		<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask"
			classpath="ant/appBundler-1.0ea.jar" />
		<bundleapp outputdirectory="${target.dir}" name="${name}"
			displayname="${name}" identifier="${base.package}" icon="${images.dir}/${icon.file.macos}"
			mainclassname="${main.class}">
			<runtime dir="${java.runtime}" />
			<option
				value="-splash:${working.dir.macos.resources}/images/${splashscreen.file}" />
			<argument value="-wd=${working.dir.macos.resources}/" />
			<arch name="x86_64"/>
			<plistentry key="NSHighResolutionCapable" value="true"/>
		</bundleapp>

		<copy file="${target.dir}/${jar.file}" tofile="${macos.bundle.dir}/Java/${jar.file}" />
		<copy todir="${macos.bundle.dir}/Resources/${images.dir}">
			<fileset dir="${images.dir}" />
		</copy>
	</target>

	<!-- Generates a DMG installer image form the app bundle -->
	<target name="dmg" depends="macbundle">

		<!-- Create a temporary Disk Image -->
		<exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
			<arg value="create" />
			<arg value="-srcfolder" />
			<arg value="${target.dir}/${name}.app" />
			<arg value="-volname" />
			<arg value="${name}" />
			<arg value="-ov" />
			<arg value="${target.dir}/${name}-tmp.dmg" />
			<arg value="-fs" />
			<arg value="HFS+" />
			<arg value="-format" />
			<arg value="UDRW" />
		</exec>

		<!-- Attach the temporary image -->
		<exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
			<arg value="attach" />
			<arg value="${target.dir}/${name}-tmp.dmg" />
			<arg value="-mountroot" />
			<arg value="${mountdir}/" />
		</exec>

		<!-- Copy the background, the volume icon and DS_Store files -->
		<mkdir dir="${mountdir}/${name}/.background" />
		<copy file="${images.dir}/${dmgbackground.file}" tofile="${mountdir}/${name}/.background/background.png"
			overwrite="true" />
		<copy file="${images.dir}/${icon.file.macos}" tofile="${mountdir}/${name}/.VolumeIcon.icns"
			overwrite="true" />
		<copy file="DS_Store" tofile="${mountdir}/${name}/.DS_Store"
			overwrite="true" />

		<!-- Indicate that we want a custom icon -->
		<exec executable="/usr/bin/SetFile" os="Mac OS X">
			<arg value="-a" />
			<arg value="C" />
			<arg value="${mountdir}/${name}" />
		</exec>

		<!-- Add a symbolic link to the Applications directory -->
		<symlink link="${mountdir}/${name}" resource="/Applications" />
	    
		<!-- Set jspawnhelper executable (Needed to retrieve open programs) -->
		<chmod file="${mountdir}/${name}/${name}.app/Contents/PlugIns/jre/Contents/Home/jre/lib/jspawnhelper" perm="+x"/>
		
		<!-- Eject MIDI Automator and run .build.sh from here on until this is resolved https://stackoverflow.com/questions/48368389/hdiutil-attach-detach-convert-results-to-resource-temporarily-unavailable-->
		
		<!-- Detach the temporary image -->
		<exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
			<arg value="detach" />
			<arg value="-force" />
			<arg value="${mountdir}/${name}" />
		</exec>
		 
		
		<!-- Compress it to a new image -->
		<exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
			<arg value="convert" />
			<arg value="${target.dir}/${name}-tmp.dmg" />
			<arg value="-format" />		
			<arg value="UDZO" />
			<arg value="-o" />
			<arg value="${target.dir}/${dist.dmg}" />
		</exec> 
		
		
		<!-- Delete the temporary image -->
		<delete file="${target.dir}/${name}-tmp.dmg" quiet="yes" failonerror="false" />
		
		
	</target>
</project>

